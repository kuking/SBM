/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package uk.co.sbm;

import com.google.common.collect.ImmutableList;
import org.junit.Before;
import org.junit.Test;

import java.math.BigDecimal;
import java.util.List;

import static org.junit.Assert.*;

public class LiveOrderBoardServiceTest {

    private LiveOrderBoardService underTest;

    @Before
    public void before() {
        underTest = new LiveOrderBoardService();
    }

    @Test
    public void register_simplest() {
        assertTrue(underTest.register(givenBuyOrder("100", "3.14")));
    }

    @Test
    public void register_shouldNotAcceptDuplicates() {
        // this might be questionable, but decided as is. OrderNo could be added to order object for uniqueness.
        underTest.register(givenBuyOrder("100", "3.14"));

        assertFalse(underTest.register(givenBuyOrder("100", "3.14")));
    }

    @Test
    public void register_itNormalizesOrdersFirst() {
        underTest.register(givenBuyOrder("1000.0", "3.1415"));

        assertFalse(underTest.register(givenBuyOrder("1000", "3.14")));
        // effectively the same price/quantity after normalization, therefore should fail
    }

    @Test
    public void getSummary_simplest() {
        Order b1 = givenBuyOrder("100", "3.1415");
        underTest.register(b1);

        List<Order> book = underTest.summary(Order.Type.BUY);

        assertEquals(book, ImmutableList.of(b1.normalized()));
    }

    @Test
    public void getSummary_buysAndSellsAreNotMixed() {
        underTest.register(givenBuyOrder("100", "3.14"));
        underTest.register(givenBuyOrder("100", "2.71"));
        underTest.register(givenSellOrder("200", "40"));

        List<Order> sellBook = underTest.summary(Order.Type.SELL);
        List<Order> buyBook = underTest.summary(Order.Type.BUY);

        assertNotEquals(sellBook, buyBook);
        assertEquals(2, buyBook.size());
        assertEquals(1, sellBook.size());
    }


    private Order givenBuyOrder(String quantity, String price) {
        return new Order("user1", new BigDecimal(quantity), new BigDecimal(price), Order.Type.BUY);
    }

    private Order givenSellOrder(String quantity, String price) {
        return new Order("user1", new BigDecimal(quantity), new BigDecimal(price), Order.Type.SELL);
    }

}
